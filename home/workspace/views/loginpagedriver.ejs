
<!DOCTYPE html>
<html>
	<head>
		<link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">
		   
		<meta charset="utf-8">
		<title>Login Form</title>
		  <style>
      /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
      #map {
         width: 350px;
        height: 400px;
      }
    #pac-input {
    background-color: #fff;
    font-family: sans-serif;
    font-size: 20px;
    font-weight: 300;
    text-align: center;
    margin: 76px 0px 0px -165px;
    padding: 10px 0px 10px 0px;
    text-overflow: ellipsis;
    width: 300px;
}

      /* Optional: Makes the sample page fill the window. */
     
    </style>
	</head>
	<body>
		 <div class="container" style="padding-right:20px; display:inline-block;">
       
<div style="max-width:60%;margin: 30px auto;">
    
    
  	   
     	    
<div class="container1" style="background-color:#F5E7E7; padding-bottom:40px ; border-radius: 5px ;">
    <div style="width:35%; margin:30px auto; margin-bottom:30px; padding-top:50px ; padding:bottom:40px;border:none">
    <div class="row">
    <h1 style="text-align: center;">Login  Here</h1>
    <br>
    
    <form method="POST" action="/loginsuccessdriver">
    
    <div class=form-group>
    <input class="form-control" type="email" id="email23" name="Email" placeholder="email" required>
    </div>
    <div class=form-group>
    <input class="form-control" type="password" name="Password" placeholder="password" minlength="8" required>
    </div>
    <div class=form-group>
    <input id="pac-input" class="controls" name="Location" type="text" placeholder="enter location">
    </div>
     <div id="map"></div>
    <h5>Forget Password? <a href="forgetPassword.ejs">Click here</a></h5>
    <br>
    <button type="submit" style="background-color:#535b63;" class="btn btn-primary btn-block btn-md">Submit</button>
</form>
		</div>
		</div>
		</div>
		
		  <script type="text/javascript">
          function initAutocomplete() {
        var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 28.6139, lng: 77.2090 },
          zoom: 13,
          mapTypeId: 'roadmap'
        });

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function() {
          searchBox.setBounds(map.getBounds());
        });

        var markers = [];
        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
        });
      }

		  </script>

   
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB96y_UXSNS1BQDkMO2lYOXm2wtSaYB4gU&libraries=places&callback=initAutocomplete"
         async defer></script>
		
		
	</body>
</html>

